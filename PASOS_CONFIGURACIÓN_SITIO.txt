1. Crear la carpeta donde vamos a trabajar (en este caso PlatziVideo)
2. Estando dentro de la carpeta, iniciamos el reporitorio de Git (para guardar nuestro trabajo en Github)
=>      git init
3. Inicializar Proyecto construyendo el archivo de configuración package.json y demás carpetas para el proyecto (este paso se puede omitir, si se usara el creat-react-app que crea todas las carpetas de un solo)
Es posible que no funcionen los comandos para crear archivos desde la terminal, asi que se pueden crear a mano tambien.
=>      npm init -y
        mkdir public
        mkdir src
        mkdir ./src/components
        touch ./src/index.js
        touch ./public/index.html
4. Instalar React. Se está instalando react y react-dom, pero al rato solo es necesario instalar react y el otro venga por defecto (investigar)
=>      npm install react react-dom
5. Instalar BABEL (no me funcionó en la terminal de windows asi que usé la terminal Cmder)
=>      npm install @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
6. crear el archivo .babelrc en la carpeta public, y colocar esto en su interior:
  {
      "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
      ]
    } 
7. instalar webpack
=>      npm install webpack webpack-cli html-webpack-plugin html-loader --save-dev
8. crear archivo configuración webpack.config.js en la raiz y colocarle esto adentro:
  const path = require('path');
  const HtmlWebpackPlugin = require('html-webpack-plugin');

  module.exports = {
    entry: './src/index.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'bundle.js',
    },
    resolve: {
      extensions: ['.js', '.jsx'],
    },
    module: {
      rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader',
          },
        },
        {
          test: /\.html$/,
          use: {
            loader: 'html-loader',
          },
        },
      ],
    },
    plugins: [
      new HtmlWebpackPlugin({
        template: './public/index.html',
        filename: './index.html',
      }),
    ],
  };
9. Instalar servidor de Webpack y visualizar los cambios en tiempo real 
=>      npm install --save-dev webpack-dev-server
10. agregalos lo siguiente a la parte de scripts en el archivo package.json:
  "build": "webpack --mode production",
  "start": "webpack serve --mode development --env development"
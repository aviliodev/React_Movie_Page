1. Crear la carpeta donde vamos a trabajar (en este caso PlatziVideo)
2. Estando dentro de la carpeta, iniciamos el reporitorio de Git (para guardar nuestro trabajo en Github)
=>      git init
3. Inicializar Proyecto construyendo el archivo de configuración package.json y demás carpetas para el proyecto (este paso se puede omitir, si se usara el creat-react-app que crea todas las carpetas de un solo)
Es posible que no funcionen los comandos para crear archivos desde la terminal, asi que se pueden crear a mano tambien.
=>      npm init -y
        mkdir public
        mkdir src
        mkdir ./src/components
        touch ./src/index.js
        touch ./public/index.html
4. Instalar React. Se está instalando react y react-dom, pero al rato solo es necesario instalar react y el otro venga por defecto (investigar)
=>      npm install react react-dom
5. Instalar BABEL (no me funcionó en la terminal de windows asi que usé la terminal Cmder)
=>      npm install @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
6. crear el archivo .babelrc en la carpeta /src, y colocar esto en su interior:
  {
      "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
      ]
    } 
7. instalar webpack
=>      npm install webpack webpack-cli html-webpack-plugin html-loader --save-dev
8. crear archivo configuración webpack.config.js en la raiz y colocarle esto adentro:
  const path = require('path');
  const HtmlWebpackPlugin = require('html-webpack-plugin');

  module.exports = {
    entry: './src/index.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'bundle.js',
    },
    resolve: {
      extensions: ['.js', '.jsx'],
    },
    module: {
      rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader',
          },
        },
        {
          test: /\.html$/,
          use: {
            loader: 'html-loader',
          },
        },
      ],
    },
    plugins: [
      new HtmlWebpackPlugin({
        template: './public/index.html',
        filename: './index.html',
      }),
    ],
  };
9. Instalar servidor de Webpack y visualizar los cambios en tiempo real 
=>      npm install --save-dev webpack-dev-server
10. agregar lo siguiente a la parte de scripts en el archivo package.json:
  "build": "webpack --mode production",
  "start": "webpack serve --mode development --env development"
11. Instalación de SaSS
=>      npm install --save-dev mini-css-extract-plugin css-loader node-sass sass-loader
12. Agregar una nueva regla en el webpack.config.js:
    {
      test: /\.(s*)css$/,
      use: [
        { loader: MiniCssExtractPlugin.loader },
        'css-loader',
        'sass-loader',
      ],
    }
13. Agregar constante nueva al inicio dle archivo webpack.config.js:
  const MiniCssExtractPlugin = require('mini-css-extract-plugin');
14. Agregar un nuevo plugin al final del archivo webpack.config.js:
  plugins: [
    new MiniCssExtractPlugin({
      filename: 'assets/[name].css',
    }),
  ]
15. instalar el sLint
=>      npm install --save-dev eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y
16. crear el archivo .eslintrc en la carpeta raiz y colocar lo siguiente:
  {
    "extends": [
      "airbnb",
      "prettier"
    ],
    "plugins": [
      "prettier"
    ],
    "rules": {
      "react/jsx-filename-extension": [
        1,
        {
          "extensions": [
            ".js",
            ".jsx"
          ]
        }
      ],
      "react/prop-types": 0,
      "no-underscore-dangle": 0,
      "import/imports-first": [
        "error",
        "absolute-first"
      ],
      "import/newline-after-import": "error"
    },
    "globals": {
      "window": true,
      "document": true,
      "localStorage": true,
      "FormData": true,
      "FileReader": true,
      "Blob": true,
      "navigator": true
    },
    "parser": "babel-eslint"
  }  
17. crear el archivo .gitignore, añadir esto:
  # Node template

  # Logs
  logs
  *.log
  npm-debug.log*
  yarn-debug.log*
  yarn-error.log*

  # Runtime data
  pids
  *.pid
  *.seed
  *.pid.lock

  # Directory for instrumented libs generated by jscoverage/JSCover
  lib-cov

  # Coverage directory used by tools like istanbul
  coverage

  # nyc test coverage
  .nyc_output

  # Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
  .grunt

  # Bower dependency directory (https://bower.io/)
  bower_components

  # node-waf configuration
  .lock-wscript

  # Compiled binary addons (https://nodejs.org/api/addons.html)
  build/Release

  # Dependency directories
  node_modules/
  jspm_packages/

  # Typescript v1 declaration files
  typings/

  # Optional npm cache directory
  .npm

  # Optional eslint cache
  .eslintcache

  # Optional REPL history
  .node_repl_history

  # Output of 'npm pack'
  *.tgz

  # Yarn Integrity file
  .yarn-integrity

  # dotenv environment variables file
  .env

  # IDE
  .idea/*
  *.iml
  *.sublime-*

  # OSX
  .DS_Store
  .vscode

  # Docs Custom
  .cache/
  yarn-error.log

18. Este paso no es tan necesario, es para instalar un loader de imágenes para este proyecto de ejemplo, peor no siempre se ocupará.
=>      npm install --save-dev file-loader
19. Este es parte del paso 18. Agregar nueva regla al webpack.config.js
  {
    test: /\.(png|gif|jpg)$/,
    use: [
      {
        loader: 'file-loader',
        options: { name: 'assets/[hash].[ext]' },
      }
    ],
  },
20. crear archivo jason initialState.json con información de las peliculas, agregar lo siguiente:
  {
    "initalState": {
      "mylist": [],
      "trends": [
        {
          "id": 2,
          "slug": "tvshow-2",
          "title": "In the Dark",
          "type": "Scripted",
          "language": "English",
          "year": 2009,
          "contentRating": "16+",
          "duration": 164,
          "cover": "http://dummyimage.com/800x600.png/99118E/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 3,
          "slug": "tvshow-3",
          "title": "Instinct",
          "type": "Adventure",
          "language": "English",
          "year": 2002,
          "contentRating": "16+",
          "duration": 137,
          "cover": "http://dummyimage.com/800x600.png/302140/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 4,
          "slug": "tvshow-4",
          "title": "Grand Hotel",
          "type": "Comedy",
          "language": "English",
          "year": 2014,
          "contentRating": "16+",
          "duration": 163,
          "cover": "http://dummyimage.com/800x600.png/5472FF/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 5,
          "slug": "tvshow-5",
          "title": "Stargate Atlantis",
          "type": "Scripted",
          "language": "English",
          "year": 2014,
          "contentRating": "16+",
          "duration": 194,
          "cover": "http://dummyimage.com/800x600.png/B36F20/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 6,
          "slug": "tvshow-6",
          "title": "Final Space",
          "type": "Scripted",
          "language": "English",
          "year": 2017,
          "contentRating": "16+",
          "duration": 124,
          "cover": "http://dummyimage.com/800x600.png/CCC539/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 7,
          "slug": "tvshow-7",
          "title": "The InBetween",
          "type": "Drama",
          "language": "English",
          "year": 2011,
          "contentRating": "16+",
          "duration": 179,
          "cover": "http://dummyimage.com/800x600.png/FF7A90/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        }
      ],
      "originals": [
        {
          "id": 8,
          "slug": "tvshow-8",
          "title": "Stargate Atlantis",
          "type": "Action",
          "language": "English",
          "year": 2012,
          "contentRating": "16+",
          "duration": 148,
          "cover": "http://dummyimage.com/800x600.png/306880/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 9,
          "slug": "tvshow-9",
          "title": "Alien Highway",
          "type": "Action",
          "language": "English",
          "year": 2019,
          "contentRating": "16+",
          "duration": 128,
          "cover": "http://dummyimage.com/800x600.png/604180/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 10,
          "slug": "tvshow-10",
          "title": "Elementary",
          "type": "Animation",
          "language": "English",
          "year": 2011,
          "contentRating": "16+",
          "duration": 346,
          "cover": "http://dummyimage.com/800x600.png/FF91BA/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 11,
          "slug": "tvshow-11",
          "title": "Strange Angel",
          "type": "War",
          "language": "English",
          "year": 2015,
          "contentRating": "16+",
          "duration": 226,
          "cover": "http://dummyimage.com/800x600.png/45807C/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 12,
          "slug": "tvshow-12",
          "title": "Private Eyes",
          "type": "Comedy",
          "language": "English",
          "year": 2018,
          "contentRating": "16+",
          "duration": 190,
          "cover": "http://dummyimage.com/800x600.png/577380/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        },
        {
          "id": 13,
          "slug": "tvshow-13",
          "title": "NCIS: Los Angeles",
          "type": "Drama",
          "language": "English",
          "year": 2010,
          "contentRating": "16+",
          "duration": 160,
          "cover": "http://dummyimage.com/800x600.png/5472FF/ffffff",
          "description": "Vestibulum ac est lacinia nisi venenatis tristique",
          "source": "https://mdstrm.com/video/58333e214ad055d208427db5.mp4"
        }
      ]
    }
  }  
21. Instalar json server, que servirá paar simular apis despues. Esto se hace desde la terminal
    pero en modo administrador, si no no funciona:
=>      npm install json-server -g
22. Una vez instalado el json-server, para iniciarlo (hay que estar ubicado en la carpeta del archivo json) se hace con el comando siguiente:
=>      json-server nombrearchivoParaTuAPI.json
        json-server initialState.json

23. Instalar Proptypes:
= >     npm install --save prop-types
24. 

==================================== FIN CONFIGURACIÓN PARA REACT ====================================

====================================INICIO REACT ROUTER Y REDUX ======================================

1. instalar React Router, la librería que nos va a permitir manejar rutas dentro de nuestra aplicación:
=>      npm install react-router-dom --save
2. Debemos modificar nuestra configuración del entorno de desarrollo local para que pueda funcionar con el uso de rutas, 
   debemos ir al archivo webpack.config.js y añadir este fragmento de código antes de plugins:

    devServer: {
        historyApiFallback: true,
    },
3. Instalar Redux:
=>      npm install redux react-redux --save    
4. instalar MD5 (se usará para Gravatar)
=>      npm install md5 --save
    